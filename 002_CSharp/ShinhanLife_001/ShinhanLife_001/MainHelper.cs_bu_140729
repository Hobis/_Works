using System;
using System.IO;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace NewEdge_002
{
    // #
    public enum Win_Message_Types
    {
        Win_Init,
        Win_Set_Title,
        Win_Set_Visible,
        Win_Set_MinSize,
        Win_Set_Location,
        Win_Resize_Max,
        Win_Resize_Min,
        Win_Resize_Normal,
        Win_Resize_FullScreen,
        Win_Resize,
        Win_Open,
        Win_Center_Location,
        Win_Copy_Folder,
        Win_Close,
    }

    // #
    public static class Debug
    {
        private const string _frontMsg = "# [hb] ";
        public static void Log(string msg)
        {
            MessageBox.Show(_frontMsg + msg);
        }
    }

    // #
    public static class FIO_Util
    {
        public static void DirectoryCopy(string sourcePath, string destPath, bool isSubPaths)
        {
            _sourcePath = sourcePath;
            _destPath = destPath;
            _isSubPaths = isSubPaths;
/*
            try
            {
                _th = new Thread(new ThreadStart(p_DirectoryCopy_Core));
                _th.Start();
            }
            catch (Exception e)
            {
                Debug.Log(e.ToString());
            }
            //_th.Join();*/

            p_DirectoryCopy_Core();
        }

        private static string _sourcePath = null;
        private static string _destPath = null;
        private static bool _isSubPaths = false;
        //private static Thread _th = null;

        private static void p_DirectoryCopy_Core()
        {
            // Get the subdirectories for the specified directory.
            DirectoryInfo t_dir = new DirectoryInfo(_sourcePath);
            DirectoryInfo[] t_dirs = t_dir.GetDirectories();

            if (!t_dir.Exists)
            {
                throw new DirectoryNotFoundException(
                    "Source directory does not exist or could not be found: "
                    + _sourcePath);
            }

            // If the destination directory doesn't exist, create it. 
            if (!Directory.Exists(_destPath))
            {
                Directory.CreateDirectory(_destPath);
            }

            // Get the files in the directory and copy them to the new location.
            FileInfo[] t_files = t_dir.GetFiles();
            foreach (FileInfo t_file in t_files)
            {
                string t_path = Path.Combine(_destPath, t_file.Name);
                t_file.CopyTo(t_path, false);
            }

            // If copying subdirectories, copy them and their contents to new location. 
            if (_isSubPaths)
            {
                foreach (DirectoryInfo t_subdir in t_dirs)
                {
                    string t_path = Path.Combine(_destPath, t_subdir.Name);
                    DirectoryCopy(t_subdir.FullName, t_path, _isSubPaths);
                }
            }
            
            _sourcePath = null;
            _destPath = null;
            _isSubPaths = false;

/*
            Thread t_et = _th;
            _th = null;*/
            
/*
            try
            {
                p_createShortcutToDesktop("hello222222");
            }
            catch (Exception e)
            {
                Debug.Log(e.ToString());
            }*/
        }

        private static void p_createShortcutToDesktop(string linkName)
        {
            string t_deskPath = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
            string t_filePath = t_deskPath + "\\" + linkName + ".url";
            string t_exePath = @"C:\Users\Hobis\Desktop\__test\main1.exe";
            using (StreamWriter writer = new StreamWriter(t_filePath, true, Encoding.ASCII))
            {
                writer.WriteLine("[InternetShortcut]");
                writer.WriteLine("URL=file:///" + t_exePath);
                writer.WriteLine("IconIndex=0");
                string icon = t_exePath.Replace('\\', '/');
                writer.WriteLine("IconFile=" + icon);
                writer.Flush();
            }
        }
    }
}